version: '3.8'

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U admin --dbname=tradeTornado'
    interval: 10s
    timeout: 5s
    retries: 5
  volumes:
    - postgres_data:/var/lib/postgresql/data

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_DB: tradeTornado
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      if [ -d /var/lib/postgresql/data ] && [ ! -z \"$(ls -A /var/lib/postgresql/data)\" ]; then
        echo 'Cleaning up existing data directory...'
        rm -rf /var/lib/postgresql/data/*
      fi
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/bitnami/kafka


  go-app:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: awrmin/trade-tornado:latest
    ports:
      - "8080:8080"
    depends_on:
      - postgres_primary
      - postgres_replica
      - kafka
    environment:
      APP_NAME: tradeTornado
      POSTGRES_MASTER_HOST: postgres_primary
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_MASTER_USER: admin
      POSTGRES_MASTER_PASS: adminpassword
      POSTGRES_MASTER_DB: tradeTornado
      POSTGRES_MASTER_MAX_CONNECTION: 30
      POSTGRES_MASTER_MAX_IDLE: 10
      POSTGRES_SLAVE_HOST: postgres_replica
      POSTGRES_SLAVE_PORT: 5432
      POSTGRES_SLAVE_USER: admin
      POSTGRES_SLAVE_PASS: adminpassword
      POSTGRES_SLAVE_DB: tradeTornado
      POSTGRES_SLAVE_MAX_CONNECTION: 30
      POSTGRES_SLAVE_MAX_IDLE: 4
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUMER_BATCH_SIZE: 100
      KAFKA_GROUP_ID: tradeTornadoGroup
      KAFKA_USERNAME: ""
      KAFKA_PASSWORD: ""
      METRIC_PORT: 9090
      MONITOR_DISABLE: "true"
      IS_PRODUCTION: "false"
      API_PORT: 8080
      API_NAME: order-server
      API_READ_TIMEOUT: 50000
      API_WRITE_TIMEOUT: 10000
      KAFKA_ORDER_CREATE_TOPIC: order-events
      KAFKA_ORDER_MATCH_TOPIC: order-matches
      KAFKA_ORDER_CREATE_CONSUMER_GROUP: matcher

  go-producer:
    image: awrmin/trade-tornado-producer:latest
    # build:
    #   context: ./producer
    #   dockerfile: Dockerfile
    depends_on:
      - kafka
    environment:
      BROKER: kafka:9092
      TOPIC: order-events
      NUM_WORKERS: 5
      NUM_ORDERS: 100
      MIN_PRICE: 1
      MAX_PRICE: 10
      MIN_QUANTITY: 1
      MAX_QUANTITY: 20
      BASE_ID: 4000

volumes:
  postgres_primary_data:
  postgres_replica_data:
  kafka-data:
